*&---------------------------------------------------------------------*
*& Report ZABAP_EXERCISES2
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
report zabap_exercises2.

*001--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a TYPE as a character with 10 positions
*
*data lv_char type c length 10.
*
*002--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare an integer
*
*data lv_num type i.
*
*003--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a type as a number with 7 positions
*
*data: lv_num type n length 7.
*
*004--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a date type
*
*data lv_date type d.
*
*005--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a time type
*
*data lv_time type t.
*
*006--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a time type
*
*data lv_time type t.
*
*007--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a structure type with 5 fields, each field with the same types from exercises 1 to 5
*
*types: begin of wa_struct,
*  lv_char type c length 10,
*  lv_num type i,
*  lv_num2 type n length 7,
*  lv_date type d,
*  lv_time type t,
*end of wa_struct.
*
*008--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a structure type with 5 fields, each field with the same types from exercises 1 to 5
*
*types: begin of wa_struct,
*  lv_char type c length 10,
*  lv_num type i,
*  lv_num2 type n length 7,
*  lv_date type d,
*  lv_time type t,
*end of wa_struct.
*
*009--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a type using the global structure SFLIGHT
*
*data wa_sflight type sflight.
*
*010--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a structure type with the following components of the global structure SFLIGHT:
*CARRID, CONNID, FLDATE, PRICE, CURRENCY, PLANETYPE, SEATSMAX and SEATSOCC
*
*types: begin of wa_sflight,
*         carrid    type sflight-carrid,
*         connid    type sflight-connid,
*         fldate    type sflight-fldate,
*         price     type sflight-price,
*         currency  type sflight-currency,
*         planetype type sflight-planetype,
*         seatsmax  type sflight-seatsmax,
*         seatsocc  type sflight-seatsocc,
*       end of wa_sflight.
*
*011--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a structure type with the following components of the global structure SBOOK:
*CARRID, CONNID, FLDATE, BOOKID, CUSTOMID
*
*types: begin of wa_sbook,
*         carrid   type sbook-carrid,
*         connid   type sbook-connid,
*         fldate   type sbook-fldate,
*         bookid   type sbook-bookid,
*         customid type sbook-customid,
*       end of wa_sbook.
*
*012--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a structure containing all the fields mentioned in exercises 8 and 9. Check it using the ABAP Debugger
*
*types: begin of wa_sflight,
*         carrid    type sflight-carrid,
*         connid    type sflight-connid,
*         fldate    type sflight-fldate,
*         price     type sflight-price,
*         currency  type sflight-currency,
*         planetype type sflight-planetype,
*         seatsmax  type sflight-seatsmax,
*         seatsocc  type sflight-seatsocc,
*       end of wa_sflight.
*
*types: begin of wa_sbook,
*         carrid   type sbook-carrid,
*         connid   type sbook-connid,
*         fldate   type sbook-fldate,
*         bookid   type sbook-bookid,
*         customid type sbook-customid,
*       end of wa_sbook.
*
*types: begin of wa_sflight_sbook.
*  include type wa_sflight.
*  include type wa_sbook as book renaming with suffix _book.
*types end of wa_sflight_sbook.
*
*013--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a table type of integers
*
*data it_data type table of i.
*
*014--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a table type with all components of the global structure SFLIGHT
*
*data: it_sflight type standard table of sflight.
*
*015--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a table type using the structure type created in exercise 8
*
*types: begin of wa_struct,
*  lv_char type c length 10,
*  lv_num type i,
*  lv_num2 type n length 7,
*  lv_date type d,
*  lv_time type t,
*end of wa_struct.
*
*data: it_data type table of wa_struct.
*
*016--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a table type with the following components of the table SBOOK: CARRID,
*CONNID, FLDATE, BOOKID, CUSTOMID but using CUSTOMID as part of the table key
*
*types: begin of wa_sbook,
*  carrid   type sbook-carrid,
*  connid   type sbook-connid,
*  fldate   type sbook-fldate,
*  bookid   type sbook-bookid,
*  customid type sbook-customid,
*end of wa_sbook.
*
*data: it_sbook type table of wa_sbook with key customid.
*
*017--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a table type with the following components of the table SBOOK: CARRID,
*CONNID, FLDATE, BOOKID, CUSTOMID but using CUSTOMID as part of the table key
*
*Declare a variable of type character with 10 positions and give it ‘Hello ABAP’ as an initial value.
*
*data lv_name type ch length 10.
*
*lv_name = 'Hello ABAO'.
*
*018--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a table type with the following components of the table SBOOK: CARRID,
*CONNID, FLDATE, BOOKID, CUSTOMID but using CUSTOMID as part of the table key
*
*Declare a variable of numeric type with 4 positions and initial value 1234.
*
*data lv_num type n length 4.
*
*lv_num = 1234.
*
*019--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a table type with the following components of the table SBOOK: CARRID,
*CONNID, FLDATE, BOOKID, CUSTOMID but using CUSTOMID as part of the table key
*
*Declare a variable of type integer with initial value 42
*
*data lv_num type i value 42.
*
*write lv_num.
*
*020--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a variable of type integer with initial value 12.72.
*
*data lv_num type i value '12.72'.
*
*021--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a variable of type date and give it halloween day
*
*data: lv_halloween type d.
*
*lv_halloween = '20241031'.
*
*022--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a packed number variable with 7 decimal places
*
*data: lv_num type p length 10 decimals 7.
*
*023--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a variable of type S_CARR_ID
*
*data: lv_carrid type s_carr_id.
*
*024--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a variable of the same type of field carrid from table SPFLI
*
*data: lv_carrid type spfli-carrid.
*
*025--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a variable of the same type of field carrid from table SPFLI
*
*data: lv_fldate type sflight-fldate.
*
*026--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a variable of the same type of field carrid from table SPFLI
*
*data ls_sbook type sbook.
*
*027--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a structure with fields of the table SFLIGHT carrid, CONNID, FLDATE, PRICE, CURRENCY, PLANETYPE, and SEATSMAX SEATSOCC
*
*types: begin of wa_sflight,
*         carrid    type sflight-carrid,
*         connid    type sflight-connid,
*         fldate    type sflight-fldate,
*         price     type sflight-price,
*         currency  type sflight-currency,
*         planetype type slifght-planetype,
*         seatsmax  type sflight-seatsmax,
*         seatsocc  type sflight-seatsocc,
*       end of wa_sflight.
*
*data ls_sflight type wa_sflight.
*
*028--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a structure with all fields of the table SBOOK and the field TELEPHONE from SCUSTOM table
*
*data: begin of wa_sbook_scustom.
*   include structure sbook.
*   data lv_telephone type scustom-telephone.
*data end of wa_sbook_scustom.
*
*029--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare an internal table with fields of the table SBOOK CARRID, CONNID, FLDATE, BOOKID, CUSTOMID
*
*types: begin of wa_sbook,
*         carrid   type sbook-carrid,
*         connid   type sbook-connid,
*         fldate   type sbook-fldate,
*         bookid   type sbook-bookid,
*         customid type sbook-customid,
*       end of wa_sbook.
*
*data: it_sbook type table of wa_sbook.
*
*030--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare an internal table with all table fields from table SCARR
*
*data: it_scarr type standard table of scarr.
*
*031--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare an internal table with all table fields SPFLI
*
*data it_spfli type standard table of spfli.
*
*032--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare an internal table with all table fields from SCARR and the field TELEPHONE from table SCUSTOM
*
*types: begin of wa_scarr_phone.
*  include structure scarr.
*  types ty_phone type scustom-telephone.
*types: end of wa_scarr_phone.
*
*data: it_scarr_phone type table of wa_scarr_phone.
*
*033--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a constant which contains your name.
*
*constants lc_name type string value 'Rafael'.
*
*034--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare two constants which contain the values 'X' (true) and ' ' (false).
*Note: This is a common practice as ABAP does not contain a boolean primitive type
*
*constants: lc_true type c length 1 value 'X',
*           lc_false type c length 5 value space.
*
*035--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a constants which contains the 5 first decimals of Pi.
*
*constants lc_num type p length 6 decimals 5 value '3.14159'.
*
*036--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a constants which contains the 5 first decimals of Pi.
*
*constants lc_num type p length 6 decimals 5 value '3.14159'.
*
*037--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a work area of constants. All components must be integers.
*
*constants: begin of wa_consts,
*  lc_const0 type i value 1,
*  lc_const2 type i value 2,
*  lc_const3 type i value 3,
*  lc_const4 type i value 4,
*  lc_const5 type i value 5,
*end of wa_consts.
*
*038--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a work area of 5 constant components. All of them should have different primitive types.
*
*constants: begin of wa_consts,
*             lc_const0 type i value 1,
*             lc_const1 type n value 2,
*             lc_const2 type p decimals 2 value '3.33',
*             lc_const4 type string value 'Rafael',
*             lc_const5 type c length 6 value 'Rafael',
*             lc_const6 type d value '20240801',
*             lc_const7 type t value '092500',
*           end of wa_consts.
*
*039--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a work area of 5 constant components. All of them should have different primitive types.
*
*constants: begin of wa_consts,
*             lc_const0 type i value 1,
*             lc_const1 type n value 2,
*             lc_const2 type p decimals 2 value '3.33',
*             lc_const4 type string value 'Rafael',
*             lc_const5 type c length 6 value 'Rafael',
*             lc_const6 type d value '20240801',
*             lc_const7 type t value '092500',
*           end of wa_consts.
*
*040--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a work area of 5 constant components. All of them should have different primitive types.
*
"Is it possible to declare an internal table of constants?
*
"answer: No initial value can be specified for internal tables and references
*
*041--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
"Is it possible to declare an internal table of constants?
*
"answer: No initial value can be specified for internal tables and references
*
*
*042--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare all types and constants from type-pools ABAP and ICON.
*
*type-pools: icon, abap.
*
*constants lc_icon like icon_information value '@0S@'.
*data lv_bool type abap_bool.
*
*043--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a constant which type is the same of another constant.
*
*constants lc_const1 type i value 1.
*constants lc_const2 like lc_const1 value 2.
*
*044--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a type which is used in another type, variable, work area, internal table and constant.
*
*types: begin of wa_struct1,
*         lv_num    type i,
*         lv_char   type c,
*         lv_string type string,
*       end of wa_struct1.
*
*data: lv_var type p decimals 2.
*
*data: ls_struct type wa_struct1,
*      it_struct type table of wa_struct1.
*
*data: ls_struct2 like ls_struct,
*      ls_stuct3  like line of it_struct,
*      ls_data    like table of ls_struct.
*
*045--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Declare a variable which is used in another variable, type, work area, internal table and constant.
*
*types: begin of wa_struct1,
*         lv_num    type i,
*         lv_char   type c,
*         lv_string type string,
*       end of wa_struct1.
*
*data: lv_var type p decimals 2.
*constants lc_const type i value 10.
*
*data: ls_struct type wa_struct1,
*      it_struct type table of wa_struct1.
*
*data: ls_struct2 like ls_struct,
*      ls_stuct3  like line of it_struct,
*      ls_data    like table of ls_struct.
*
*data lv_var2 like lv_var.
*constants lc_const2 like lc_const value 22.
*
*046--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program that performs the following calculation: 2 + 3 * 5
*
*data: lv_operation type p decimals 1.
*
*START-OF-SELECTION.
*
*lv_operation = 2 + 3 * 5.
*
*047--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program that get two integers inside variables and perform the addition, subtraction, multiplication, division and power between them.
*
*data: lv_num1 type p decimals 2,
*      lv_num2 type p decimals 2,
*      lv_res  type p decimals 2.
*
*lv_num1 = 10.
*lv_num2 = 5.
*
*START-OF-SELECTION
*
*lv_res = lv_num1 + lv_num2.
*clear lv_res.
*lv_res = lv_num1 - lv_num2.
*clear lv_res.
*lv_res = lv_num1 * lv_num2.
*clear lv_res.
*lv_res = lv_num1 / lv_num2.
*clear lv_res.
*lv_res = lv_num1 ** lv_num2.
*
*048--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program that get two integers inside parameters and perform the addition, subtraction, multiplication, division and power between them.
*
*parameters: lv_num1 type p decimals 2 visible length 2,
*            lv_num2 type p decimals 2 visible length 2.
*
*data: lv_res  type p decimals 2.
*
*start-of-selection.
*
*  lv_res = lv_num1 + lv_num2.
*  write: 'Addition: ', lv_res.
*  clear lv_res.
*  new-line.
*  lv_res = lv_num1 - lv_num2.
*  write: 'Subtraction: ', lv_res.
*  clear lv_res.
*  new-line.
*  lv_res = lv_num1 * lv_num2.
*  write: 'Multiplication: ', lv_res.
*  clear lv_res.
*  new-line.
*  lv_res = lv_num1 / lv_num2.
*  write: 'Division: ', lv_res.
*  clear lv_res.
*  new-line.
*  lv_res = lv_num1 ** lv_num2.
*  write: 'Power: ', lv_res.
*
*049--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program that concatenates two words and write the result.
*
*data: lv_word1  type string value 'Hello',
*      lv_word2  type string value 'World',
*      lv_phrase type string.
*
*concatenate lv_word1 lv_word2 into lv_phrase separated by ' '.
*
*write: lv_phrase.
*
*50--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
**Write an executable program that concatenates two words and the current month, separating each part by a "-" and write the result.
*
*data: lv_word1  type string value 'Hello',
*      lv_word2  type string value 'World',
*      lv_phrase type string.
*
*data: lv_day   type string value '01',
*      lv_month type string value '08',
*      lv_year  type string value '2024',
*      lv_date  type string.
*
*start-of-selection.
*
*  concatenate lv_day lv_month lv_year into lv_date separated by '-'.
*  concatenate lv_word1 lv_word2 lv_date into lv_phrase separated by ' '.
*
*  write: lv_phrase.
*
*51--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program that reads the current system date and write it in your language in text format.
*Ex: 20140727 should be written as July the Twenty-Seventh, 2014
*
*data lv_date type sy-datum.
*data it_date type table of casdayattr with header line.
*data lv_lang type sy-langu.
*
*lv_lang = 'PT'.
*
*lv_date = sy-datum.
*
*call function 'DAY_ATTRIBUTES_GET'
*  exporting
**   FACTORY_CALENDAR                 = ' '
**   HOLIDAY_CALENDAR                 = ' '
*    date_from      = lv_date
*    date_to        = lv_date
*    language       = lv_lang
**   NON_ISO        = ' '
** IMPORTING
**   YEAR_OF_VALID_FROM               =
**   YEAR_OF_VALID_TO                 =
**   RETURNCODE     =
*  tables
*    day_attributes = it_date
** EXCEPTIONS
**   FACTORY_CALENDAR_NOT_FOUND       = 1
**   HOLIDAY_CALENDAR_NOT_FOUND       = 2
**   DATE_HAS_INVALID_FORMAT          = 3
**   DATE_INCONSISTENCY               = 4
**   OTHERS         = 5
*  .
*if sy-subrc eq 0.
*  write: / it_date-day_string,
*         / it_date-freeday,
*         / it_date-holiday.
*endif.
*
*52--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program that reads the current system time and write the time in 6 different zones (3 of them should be compulsorily Greenwich, Delhi and Brasilia).
*
*
*data v_timezone1 type tznzone value 'GMTUK'.  " Greenwich
*data v_timezone2 type tznzone value 'INDIA'.  " Delhi
*data v_timezone3 type tznzone value 'BRAZIL'. " Brasilia
*data v_timezone4 type tznzone value 'CST'.
*data v_timezone5 type tznzone value 'ISRAEL'.
*data v_timezone6 type tznzone value 'RUS06'.
*
*data v_timestamp type tzonref-tstamps.
*data v_timestamp_string type string.
*
*start-of-selection.
*
*  concatenate sy-datum sy-uzeit into v_timestamp_string.
*  v_timestamp = v_timestamp_string.
*
*  write v_timestamp time zone v_timezone1. new-line.
*  write v_timestamp time zone v_timezone2. new-line.
*  write v_timestamp time zone v_timezone3. new-line.
*  write v_timestamp time zone v_timezone4. new-line.
*  write v_timestamp time zone v_timezone5. new-line.
*  write v_timestamp time zone v_timezone6. new-line.
*
*53--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program that counts how many vowels are in the name of the user running the program and print the result
*
*data: lv_vowels_count type i,
*      lv_vowels_total type i.
*
*data: lv_user type sy-uname.
*
*start-of-selection.
*
*  lv_user = sy-uname.
*  translate lv_user to upper case.
*
*  find all occurrences of 'A' in lv_user match count lv_vowels_count.
*  lv_vowels_total = lv_vowels_count.
*  find all occurrences of 'E' in lv_user match count lv_vowels_count.
*  lv_vowels_total = lv_vowels_count +  lv_vowels_total.
*  find all occurrences of 'I' in lv_user match count lv_vowels_count.
*  lv_vowels_total = lv_vowels_count +  lv_vowels_total.
*  find all occurrences of 'O' in lv_user match count lv_vowels_count.
*  lv_vowels_total = lv_vowels_count +  lv_vowels_total.
*  find all occurrences of 'U' in lv_user match count lv_vowels_count.
*  lv_vowels_total = lv_vowels_count +  lv_vowels_total.

* Another option
* FIND ALL OCCURRENCES OF REGEX 'A|E|I|O|U' IN lv_user MATCH COUNT lv_vowels_count.
*
*  write: lv_vowels_total.
*
*54--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program that counts a string length and if it's bigger than 2o characteres, write 'Too big'. If not, write the string length.
*
*data: lv_string type string,
*      lv_length type i.
*
*start-of-selection.
*
*  lv_string = 'Rafael'.
*  lv_length = strlen( lv_string ).
*
*  if lv_length > 20.
*    write: / 'Too big'.
*  else.
*    write: lv_length.
*  endif.
*
*55--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program that counts from 1 to 100 and for each multiple of 8, write the message: "The number [number] is a multiple of 8 ".
*
*data: lv_num type i value 1.
*
*do 100 times.
*
*  if lv_num mod 8 = 0.
*    write: / 'The number ', lv_num, 'is divisible by 8'.
*    new-line.
*  endif.
*
*  add 1 to lv_num.
*
*enddo.
*
*56--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program that contains a routine which prints all usernames in the system. (Check table USR04 and its content in transaction SE11, SE16 or SE16N).
*
*types: begin of wa_usernames,
*         bname type usr04-bname,
*       end of wa_usernames.
*
*data: it_usernames type table of wa_usernames.
*
*start-of-selection.
*
*  perform get_data.
*  perform display_data.
**&---------------------------------------------------------------------*
**& Form get_data
**&---------------------------------------------------------------------*
**& text
**&---------------------------------------------------------------------*
**& -->  p1        text
**& <--  p2        text
**&---------------------------------------------------------------------*
*form get_data .
*
*  select bname from usr04 into table it_usernames.
*
*endform.
**&---------------------------------------------------------------------*
**& Form display_data
**&---------------------------------------------------------------------*
**& text
**&---------------------------------------------------------------------*
**& -->  p1        text
**& <--  p2        text
**&---------------------------------------------------------------------*
*form display_data .
*
*  delete ADJACENT DUPLICATES FROM it_usernames.
*
*  loop at it_usernames into data(ls_usernames).
*    write: 'Username: ', ls_usernames.
*    new-line.
*  endloop.
*
*endform.
*
*57--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*For this exercise, you should Read the help from command FORM completely.
*Then, write an executable program that has a routine that receives four global variables and change their value.
*Each variable will be received in a different way: 2 of them using the addition USING and the other 2 using the addition CHANGING from the FORM command.
"For each pair use and omit the adding VALUE.
*Print the contents of all global variables before the routine is called, at the beginning of the routine, at the end of the routine (after all values are changed) and after the PERFORM statement.
*See how the contents of variables behave using the debugger.
*
*data gv_a type i value 1.
*data gv_b type i value 2.
*data gv_c type i value 3.
*data gv_d type i value 4.
*&---------------------------------------------------------------------*
*&      form  form_parameters
*&---------------------------------------------------------------------*
* Get 4 parameters in different ways
*----------------------------------------------------------------------*
*      -->us_a       text
*      -->(usv_b)    text
*      -->ch_c       text
*      -->(chv_d)    text
*----------------------------------------------------------------------*
*form form_parameters
*                    using
*                    us_a type i
*                    value(usv_b) type i
*                    changing ch_c type i
*                    value(chv_d) type i.
*
*  write 'Inside FORM.'. new-line.
*  write: 'us_a: ', us_a. new-line.
*  write: 'usv_b: ', usv_b. new-line.
*  write: 'ch_c: ', ch_c. new-line.
*  write: 'chv_d: ', chv_d. new-line.
*
*  us_a = us_a + 10.
*  usv_b = usv_b + 10.
*  ch_c = ch_c + 10.
*  chv_d = chv_d + 10.
*
*  write 'Inside FORM, after update local variables'. new-line.
*  write: 'us_a: ', us_a. new-line.
*  write: 'usv_b: ', usv_b. new-line.
*  write: 'ch_c: ', ch_c. new-line.
*  write: 'chv_d: ', chv_d. new-line.
*  write: 'gv_a: ', gv_a. new-line.
*  write: 'gv_b: ', gv_b. new-line.
*  write: 'gv_c: ', gv_c. new-line.
*  write: 'gv_d: ', gv_d. new-line.
*
*endform.
*
*start-of-selection.
*
*  "form_parameters
*  write 'Before FORM'. new-line.
*  write: 'gv_a: ', gv_a. new-line.
*  write: 'gv_b: ', gv_b. new-line.
*  write: 'gv_c: ', gv_c. new-line.
*  write: 'gv_d: ', gv_d. new-line.
*
*  perform form_parameters
*                          using
*                          gv_a
*                          gv_b
*                          changing
*                          gv_c
*                          gv_d.
*
*  write 'After FORM'. new-line.
*  write: 'gv_a: ', gv_a. new-line.
*  write: 'gv_b: ', gv_b. new-line.
*  write: 'gv_c: ', gv_c. new-line.
*  write: 'gv_d: ', gv_d. new-line.
*
*58--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program that has a routine that receives two numbers and returns the largest of them, If the numbers are equal return the number itself.
*
*data: lv_num1 type i value 12,
*      lv_num2 type i value 11.
*
*perform verify_num using lv_num1 lv_num2.
**&---------------------------------------------------------------------*
**& Form verify_num
**&---------------------------------------------------------------------*
**& text
**&---------------------------------------------------------------------*
**& -->  p1        text
**& <--  p2        text
**&---------------------------------------------------------------------*
*form verify_num using fp_num1 fp_num2.
*
*  if fp_num1 eq fp_num2.
*    write: fp_num1.
*  elseif fp_num1 gt fp_num2.
*    write: fp_num1.
*  else.
*    write: fp_num2.
*  endif.
*
*endform.
*
*59--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program that has a routine that receives two numbers and return a flag (character with length 1).
*If the numbers are equal, set the flag with 'X. Otherwise set the flag to space.
*
*data: lv_flag type bool value 'X'.
*
*start-of-selection.
*
*  perform return_bool using 1 2 changing lv_flag.
*
*form return_bool using num1 num2 changing flag.
*  if num1 eq num2.
*    flag = 'X'.
*  else.
*    flag = space.
*  endif.
*endform.
*
*60--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program that has a routine that takes two numbers and writes the result of the operation [higher_number / lower_number] if the numbers are different.
*If they are equal, write the result of the operation [number ^ 2].
*
*data: lv_num1 type i,
*      lv_num2 type i,
*      lv_op   type i.
*
**lv_num1 = 5.
**lv_num2 = 10.
*
*perform get_operation using lv_num1 lv_num2 changing lv_op.
*
*start-of-selection.
*
*form get_operation using num1 num2 changing op.
*
*  if num1 gt num2.
*
*    op = num1 + num2.
*    write: 'Add: ', op.
*    new-line.
*    clear op.
*    op = num1 - num2.
*    write: 'Sub: ', op.
*    new-line.
*    clear op.
*    op = num1 * num2.
*    write: 'Mult: ', op.
*    new-line.
*    clear op.
*    op = num1 / num2.
*    write: 'Div: ', op.
*    new-line.
*    clear op.
*    op = num1 ** num2.
*    write: 'Pow: ', op.
*    new-line.
*    clear op.
*
*  elseif num2 gt num1.
*
*    op = num2 + num1.
*    write: 'Add: ', op.
*    new-line.
*    clear op.
*    op = num2 - num1.
*    write: 'Sub: ', op.
*    new-line.
*    clear op.
*    op = num2 * num1.
*    write: 'Mult: ', op.
*    new-line.
*    clear op.
*    op = num2 / num1.
*    write: 'Div: ', op.
*    new-line.
*    clear op.
*    op = num2 ** num1.
*    write: 'Pow: ', op.
*    new-line.
*    clear op.
*
*  else.
*
*    op = num2 ** 2.
*    write: 'Pow: ', op.
*    new-line.
*    clear op.
*
*  endif.
*
*endform.
*61--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program that  does NOT have a routine.
"The program should include a work area with 5 fields of different types or more.
"Then, it must be populated and its fields should be printed one per line, separated by one horizontal line.
"After testing your program, change the output separating each field by two lines.
"During this process, refactor your code to include a routine which handle the separation between each line.
*
*types: begin of wa_struct,
*         lv_num1   type i,
*         lv_num2   type p decimals 2,
*         lv_char   type c length 10,
*         lv_string type string,
*         lv_bool   type bool,
*       end of wa_struct.
*
*data: ls_struct type wa_struct,
*      it_struct type table of wa_struct.
*
*start-of-selection.
*
*  do 100 times.
*
*    ls_struct-lv_num1 = 1.
*    ls_struct-lv_num2 = '1'.
*    ls_struct-lv_char = '0000000000'.
*    ls_struct-lv_string = 'Name'.
*    ls_struct-lv_bool = 'X'.
*
*    append ls_struct to it_struct.
*
*  enddo.
*
*  uline.
*  uline.
*
*  loop at it_struct into ls_struct.
*    write: / 'Int: ', ls_struct-lv_num1.
*    write: / 'Dec: ', ls_struct-lv_num2.
*    write: / 'Char: ', ls_struct-lv_char.
*    write: / 'String: ', ls_struct-lv_string.
*    write: / 'Bool: ', ls_struct-lv_bool.
*    perform separate_lines.
*    clear ls_struct.
*  endloop.
*
*form separate_lines.
*
*  uline.
*  uline.
*
*endform.
*
*62--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program with a routine that receives a work area containing five different data types and count how many components are not filled. Finally, print result.
*
*types: begin of wa_struct,
*         num1   type i,
*         num2   type p decimals 2,
*         char   type c length 2,
*         string type string,
*         bool   type bool,
*       end of wa_struct.
*
*data: lv_num type i.
*
*data: ls_struct type wa_struct.
*
*start-of-selection.
*
*  ls_struct-num1 = 0.
*  ls_struct-string = 'Rafael'.
*  ls_struct-bool = space.
*
*  write: lv_num.
*
*  uline.
*
*  perform verify_struct using ls_struct.
*
*  uline.
*
*  write: lv_num.
*
*form verify_struct using new_struct type wa_struct.
*
*  if new_struct-num1 is initial.
*    add 1 to lv_num.
*  endif.
*  if new_struct-num2 is initial.
*    add 1 to lv_num.
*  endif.
*  if new_struct-char is initial.
*    add 1 to lv_num.
*  endif.
*  if new_struct-string is initial.
*    add 1 to lv_num.
*  endif.
*  if new_struct-bool is initial.
*    add 1 to lv_num.
*  endif.
*
*endform.
*
*63--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program with a routine that receives a work area with at least 4 components.
*All components can only be declared using numeric and different primitive types.
*Your routine should sum the values from all components and print the result.
*
*
*types: begin of wa_struct,
*  num1 type i,
*  num2 type p decimals 2,
*  num3 type n length 2,
*  num4 type numc2,
*end of wa_struct.
*
*data: lv_num type i.
*
*data: ls_struct type wa_struct,
*      it_data type table of wa_struct.
*
*START-OF-SELECTION.
*
*  ls_struct-num1 = 1.
*  ls_struct-num2 = '1'.
*  ls_struct-num3 = 1.
*  ls_struct-num4 = 1.
*
*  write: lv_num.
*
*  uline.
*  uline.
*
*  perform get_data using ls_struct changing lv_num.
*
*  write: lv_num.
*
*  form get_data using new_struct type wa_struct changing new_num.
*
*    new_num = new_struct-num1 + new_struct-num2 + new_struct-num3 + new_struct-num4.
*
*  endform.
*
*64--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program which has a routine that receives a work area with 3 char components and 3 numeric components.
"The routine should clear some component values according to the following rules:
"1. Clear char components only if the sum of the numeric components is odd (ignoring possible decimal places)
"2. Clear numeric components only if the sum of vowels in the three char components is even (ignoring lower/upper case)
*
*types: begin of wa_struct,
*         num1  type i,
*         num2  type i,
*         num3  type i,
*         name1 type string,
*         name2 type string,
*         name3 type string,
*         sum   type i,
*       end of wa_struct.
*
*data: ls_struct type wa_struct.
*data: it_data type table of wa_struct.
*data: sum type i.
*
*data: sumvowels type i.
*data: totalvowels type i.
*
*start-of-selection.
*
*  ls_struct-num1 = 1.
*  ls_struct-num2 = 1.
*  ls_struct-num3 = 4.
*  ls_struct-name1 = 'Raafael'.
*  ls_struct-name2 = 'Rafael'.
*  ls_struct-name3 = 'Rafael'.
*  ls_struct-sum = sum.
*  append ls_struct to it_data.
*
*  cl_demo_output=>display( it_data ).
*
*  perform analize_operations changing ls_struct sum.
*
*  cl_demo_output=>display( it_data ).
*
*form analize_operations changing new_struct type wa_struct new_sum.
*
*  data: bool type bool.
*
*  find all occurrences of regex 'a|e|i|o|u|A|E|I|O|U' in new_struct-name3 match count sumvowels.
*  totalvowels = sumvowels.
*
*  new_sum = new_struct-num1 + new_struct-num1 + new_struct-num1.
*
*  loop at it_data into new_struct.
*    if new_sum mod 2 = 1.
*      ls_struct-name1 = ''.
*      ls_struct-name2 = ''.
*      ls_struct-name3 = ''.
*      bool = 'X'.
*    endif.
*    if totalvowels mod 2 = 0.
*      ls_struct-num1 = 0.
*      ls_struct-num2 = 0.
*      ls_struct-num3 = 0.
*      bool = 'X'.
*    endif.
*  endloop.
*
*  if bool eq 'X'.
*    clear it_data.
*    append ls_struct to it_data.
*  endif.
*
*endform.
*
*65--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program which contains three internal tables (their type must contain at least three components of different data types).
*Each table will have a different type (standard, sorted and hashed).
*Add 3 identical values in each table and view the contents of each table in the debugger.
*
*types: begin of wa_struct,
*         num  type i,
*         name type string,
*         date type d,
*       end of wa_struct.
*
*data: it_data1 type table of wa_struct,
*      it_data2 type sorted table of wa_struct with unique key num,
*      it_data3 type hashed table of wa_struct with unique key num.
*
*data: ls_struct type wa_struct.
*
*ls_struct-num = 1.
*ls_struct-name = 'Rafael'.
*ls_struct-date = sy-datum.
*
*append ls_struct to it_data1.
*append ls_struct to it_data2.
*insert ls_struct into table it_data3.
*
*ls_struct-num = 2.
*ls_struct-name = 'Rafaell'.
*ls_struct-date = sy-datum.
*
*append ls_struct to it_data1.
*append ls_struct to it_data2.
*insert ls_struct into table it_data3.
*
*cl_demo_output=>display( it_data1 ).
*cl_demo_output=>display( it_data2 ).
*cl_demo_output=>display( it_data3 ).
*
*66--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program which has a routine that receives an internal table and print how many fields are filled with their default value (the line type of the table must have at least 4 fields).
*Hint: each primitive type has a default value. For example, 0 (zero) is the default value of integers whereas space ( ' ' ) is the default value of characters.
*
*types: begin of wa_struct,
*         num  type i,
*         name type string,
*         date type sy-datum,
*         time type t,
*       end of wa_struct.
*
*data: it_data type table of wa_struct,
*      ls_data type wa_struct.
*
*data lv_count type i value 0.
*
*start-of-selection.
*
*  perform fill_data tables it_data using ls_data.
*  perform return_data tables it_data using ls_data.
*
*  write: lv_count.
*
*form fill_data tables it_table using new_struct type wa_struct.
*  do 50 times.
*    new_struct-num = 0.
*    new_struct-name = ' '.
*    new_struct-date = '000000'.
*    new_struct-time = '000000'.
*    append new_struct to it_table.
*    clear new_struct.
*  enddo.
*endform.
*
*form return_data tables it_table using new_struct type wa_struct.
*
*  loop at it_table into new_struct.
*    if new_struct-num eq 0.
*      add 1 to lv_count.
*    endif.
*    if new_struct-name eq ' '.
*      add 1 to lv_count.
*    endif.
*    if new_struct-date eq '000000'.
*      add 1 to lv_count.
*    endif.
*    if new_struct-time eq '000000'.
*      add 1 to lv_count.
*    endif.
*  endloop.
*
*endform.
*
*67--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program which has a routine that receives an internal table and prints how many fields are blank by line (the type of table must have at least 4 fields).
*Output must be generated as: Line [line number] => [number of blank fields] + " blank fields" Total: [total number of blank fields]
*
*types: begin of wa_struct,
*         num  type i,
*         name type string,
*         date type sy-datum,
*         time type t,
*       end of wa_struct.
*
*data: it_data type table of wa_struct,
*      ls_data type wa_struct.
*
*data lv_count type i value 0.
*data: lv_count_lines type i value 0.
*data: lv_count_lines2 type i value 0.
*
*start-of-selection.
*
*  perform fill_data tables it_data using ls_data.
*  perform return_data tables it_data using ls_data.
*
*form fill_data tables it_table using new_struct type wa_struct.
*  do 50 times.
*    new_struct-num = 0.
*    new_struct-name = ' '.
*    new_struct-date = '000000'.
*    new_struct-time = '000000'.
*    append new_struct to it_table.
*    clear new_struct.
*  enddo.
*endform.
*
*form return_data tables it_table using new_struct type wa_struct.
*
*  uline.
*  write: / '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'.
*
*  loop at it_table into new_struct.
*    if new_struct-num eq 0.
*      add 1 to lv_count_lines.
*      add 1 to lv_count_lines2.
*    endif.
*    if new_struct-name eq ' '.
*      add 1 to lv_count_lines.
*      add 1 to lv_count_lines2.
*    endif.
*    if new_struct-date eq '000000'.
*      add 1 to lv_count_lines.
*      add 1 to lv_count_lines2.
*    endif.
*    if new_struct-time eq '000000'.
*      add 1 to lv_count_lines.
*      add 1 to lv_count_lines2.
*    endif.
*    if new_struct-num eq 0 or new_struct-name eq ' ' or new_struct-date eq '000000' or new_struct-time eq '000000'.
*      add 1 to lv_count.
*      write: / 'Line Number: ', lv_count, 'Number of Blank Fields: ', lv_count_lines.
*      clear lv_count_lines.
*      write: / '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'.
*      uline.
*    endif.
*  endloop.
*  write: / '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'.
*  lv_count = lines( it_table ).
*  write: / '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'.
*  write: 'Total Number of Blank Fields: ', lv_count_lines2.
*  write: / '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'.
*endform.
*
*68--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program which has a routine that receives a standard internal table. The line type used in the internal table declaration must contain at least three components any text type.
"The routine should replace all occurrences of "space" by a "_" (underscore) using work areas (not field symbols). Print the table contents before and after calling the routine.
"The internal table must be populated with at least 10 records and contemplating some fields that have "space" in all field values, other records containing spaces in just a few fields and other records without spaces at all
*
*types: begin of wa_struct,
*         name1 type string,
*         name2 type c length 20,
*         name3 type char20,
*       end of wa_struct.
*
*data: it_data type table of wa_struct,
*      it_data2 type table of wa_struct,
*      ls_data type wa_struct.
*
*START-OF-SELECTION.
*
*perform fill_data tables it_data using ls_data.
*perform replace_spaces tables it_data it_data2 using ls_data.
*perform display_data tables it_data2.
*
*form fill_data tables it_table using new_struct type wa_struct.
*
*  do 10 times.
*    new_struct-name1 = ' Rafael Albuquerque .'.
*    new_struct-name2 = ' Rua da Boa Nova 118'.
*    new_struct-name3 = ' Porto Portugal '.
*    append new_struct to it_table.
*    clear new_struct.
*  enddo.
*
*endform.
*form replace_spaces tables it_table it_table2 using new_struct type wa_struct.
*
*  data: pattern type char2 value ' _'.
*
*  loop at it_table into new_struct.
*    translate new_struct-name1 using pattern.
*    translate new_struct-name2 using pattern.
*    translate new_struct-name3 using pattern.
*    append new_struct to it_table2.
*  endloop.
*
*endform.
*form display_data tables it_table.
*
*  cl_demo_output=>display( it_table ).
*
*endform.
*
*69--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program which has a routine that receives a standard internal table.
*The line type used in the internal table declaration must contain at least three components any text type.
*The routine should replace all occurrences of "space" by a "_" (underscore) using field symbols (and not work areas).
*Print the table contents before and after calling the routine.
*The internal table must be populated with at least 10 records and contemplating
"...some fields that have "space" in all field values, other records containing spaces in just a few fields and other records without spaces at all.
*
*types: begin of wa_struct,
*         text1 type text35,
*         text2 type char32,
*         text3 type string,
*       end of wa_struct.
*
*data: it_data  type table of wa_struct,
*      it_data2 type table of wa_struct,
*      ls_data  type wa_struct.
*
*field-symbols: <fs_data>  type wa_struct.
*
*start-of-selection.
*  perform fill_data tables it_data it_data2 using ls_data.
*  perform form tables it_data.
*
*  cl_demo_output=>display( it_data2 ).
*  cl_demo_output=>display( it_data ).
*
*form fill_data tables it_table it_table2 using new_struct type wa_struct.
*
*  do 50 times.
*    new_struct-text1 = 'Rafael Correia Lopes de Albuqueruqe'.
*    new_struct-text2 = 'Rua da Boa Nova 118 - Massarelos'.
*    new_struct-text3 = 'SBX Consulting'.
*    append new_struct to it_table.
*    append new_struct to it_table2.
*    clear new_struct.
*  enddo.
*
*endform.
*form form tables it_table.
*
*  data: pattern type char2 value ' _'.
*
*  loop at it_table assigning <fs_data>.
*    translate <fs_data>-text1 using pattern.
*    translate <fs_data>-text2 using pattern.
*    translate <fs_data>-text3 using pattern.
*  endloop.
*
*endform.
*
*70--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program which has a routine that receives an internal table of strings and concatenates their values in four different ways:
* 1. Way 1: concatenate internal table texts by the line order
* 2. Way 2: concatenate internal table texts by the text ascending order
* 3. Way 3: concatenate internal table texts by the text descending order
* 4. Way 4: concatenate internal table texts by the line reverse order
*
*types: begin of wa_struct,
*         line type string,
*       end of wa_struct.
*
*data: it_data type table of wa_struct.
*data: ls_data type wa_struct.
*data: lv_string type string.
*data: lv_string_asc type string.
*data: lv_string_desc type string.
*data: lv_reverse type string.
*data: lv_string_rev type string.
*
*parameters: p_normal RADIOBUTTON GROUP rb1 default 'X',
*            p_asc RADIOBUTTON GROUP rb1,
*            p_desc RADIOBUTTON GROUP rb1,
*            p_rev RADIOBUTTON GROUP rb1.
*
*ls_data-line = 'Rafael'.
*append ls_data to it_data.
*clear ls_data.
*ls_data-line = 'Tiago' .
*append ls_data to it_data.
*ls_data-line = 'Daniel' .
*append ls_data to it_data.
*ls_data-line = 'Bruno' .
*append ls_data to it_data.
*ls_data-line = 'Serafim' .
*append ls_data to it_data.
*ls_data-line = 'Nuno' .
*append ls_data to it_data.
*ls_data-line = 'Diogo' .
*append ls_data to it_data.
*ls_data-line = 'Davi' .
*append ls_data to it_data.
*ls_data-line = 'Joana' .
*append ls_data to it_data.
*ls_data-line = 'Susana' .
*append ls_data to it_data.
*ls_data-line = 'João' .
*append ls_data to it_data.
*ls_data-line = 'André'.
*append ls_data to it_data.
*ls_data-line = 'Luís' .
*append ls_data to it_data.
*ls_data-line = 'Joaquina' .
*append ls_data to it_data.
*ls_data-line = 'Cláudio' .
*append ls_data to it_data.
*ls_data-line = 'Rui' .
*append ls_data to it_data.
*ls_data-line = 'Ricardo' .
*append ls_data to it_data.
*ls_data-line = 'Luis' .
*append ls_data to it_data.
*
*start-of-selection.
*
*  if p_normal eq 'X'.
*    perform concatenate            tables it_data using ls_data.
*  elseif p_asc eq 'X'.
*    perform concatenate_ascending  tables it_data using ls_data.
*  elseif p_desc eq 'X'.
*    perform concatenate_descending tables it_data using ls_data.
*  elseif p_rev eq 'X'.
*    perform concatenate_reverse    tables it_data using ls_data.
*  endif.
*
*form concatenate tables it_table using new_struct type wa_struct.
*
*  loop at it_table into new_struct.
*    concatenate lv_string new_struct-line into lv_string separated by space.
*  endloop.
*
*  write: / lv_string.
*
*endform.
*form concatenate_ascending tables it_table using new_struct type wa_struct..
*
*  sort it_table.
*
*  loop at it_table into new_struct.
*    concatenate lv_string_asc new_struct-line into lv_string_asc separated by space.
*  endloop.
*
*  write: / lv_string_asc.
*
*endform.
*form concatenate_descending tables it_table using new_struct type wa_struct..
*
*  sort it_table descending.
*
*  loop at it_table into new_struct.
*    concatenate lv_string_desc new_struct-line into lv_string_desc separated by space.
*  endloop.
*
*  write: / lv_string_desc.
*
*endform.
*form concatenate_reverse tables it_table using new_struct type wa_struct..
*
*  sort it_table ascending.
*
*  loop at it_table into new_struct.
*    lv_reverse = reverse( new_struct-line ).
*    concatenate lv_string_rev lv_reverse into lv_string_rev separated by space.
*  endloop.
*
*    write: / lv_string_rev.
*
*endform.
*
*71--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program with two parameters types as integers.
*The first represents a number to be printed and the second represents the length of the number to be printed.
*Place zeros to the left if necessary. Example:
* • p_number = 15 p_length = 2. Output = 15
* • p_number = 15 p_length = 6. Output = 000015
* • p_number = 2014 p_length = 2. Output = 20
* • p_number = 123456789 p_length = 10. Output = 0123456789
* • p_number = 123456789 p_length = 4. Output = 1234
*
*data: lv_length type i,      "contador para acrescentar zeros
*      lv_string type string, "recebe o numero enviado pelo parameters
*      lv_output type string. "string final de saída
*
*parameters: p_num    type i,
*            p_numlen type i.
*
*start-of-selection.
*
*  lv_string = p_num.
*  lv_length = strlen( lv_string ).
*
*  concatenate lv_string lv_output into lv_output. "saída recebe o numero do parametro.
*
*  while lv_length le p_numlen.
*    concatenate '0' lv_output into lv_output.
*    add 1 to lv_length.
*  endwhile.
*
*  write: lv_output.
*
*72--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program with two parameters which represents a base and exponent.
*Print the result of exponentiation. As both parameters are required for the operation they should be mandatory.
*
*data: lv_count type i,
*      lv_total type i.
*
*parameters: p_base type i OBLIGATORY,
*            p_exp  type i OBLIGATORY.
*
*START-OF-SELECTION.
*
*  lv_count = 1.
*
*  while lv_count lt p_exp.
*    if lv_count eq 1.
*      lv_total = lv_total + ( p_base * p_base ).
*    else.
*      lv_total = lv_total * p_base.
*    endif.
*    add 1 to lv_count.
*  endwhile.
*
*  write: lv_total.
*
*73--------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Write an executable program with two parameters (a string and a number) The number should be accepted only if it's less or equal to 25.
"The program should print the string as many times as the value of the numeric parameter.
"The output should be as following String = "ABAPers are not crazy people." Number = 21.
"Line [1]: A
"Line [2]: AB
"Line [3]: ABA
"Line [4]: ABAP
"Line [5]: ABAPe
"(...)
"Line [21]: ABAPers are not crazy
*"
*
*data: lv_count type i value 0.
*
*parameters: p_num    type i,
*            p_string type string.
*
*if p_num le 25.
*  do p_num times.
*    add 1 to lv_count.
*    write: / 'Line: ', lv_count , p_string.
*  enddo.
*else.
*  message 'Text is too long: ' type 'E' display like 'I'.
*endif.
*
*74---------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
**Write an executable program which has two internal tables, with a header line and the other
**without. Add five records in each table. In the case of the one with header line, use it embed work  area. For the other one, use a work area declared explicitly.
**Print the contents of both internal tables.
*
*data: it_data type table of string,
*      it_data2 type table of string with header line.
*
*append 'Rafael' to it_data.
*append 'Rafael' to it_data2.
*append 'Rafael' to it_data.
*append 'Rafael' to it_data2.
*append 'Rafael' to it_data.
*append 'Rafael' to it_data2.
*append 'Rafael' to it_data.
*append 'Rafael' to it_data2.
*append 'Rafael' to it_data.
*append 'Rafael' to it_data2.
*append 'Rafael' to it_data.
*append 'Rafael' to it_data2.
*append 'Rafael' to it_data.
*append 'Rafael' to it_data2.
*append 'Rafael' to it_data.
*append 'Rafael' to it_data2.
*append 'Rafael' to it_data.
*append 'Rafael' to it_data2.
*
*loop at it_data2.
*  write: / it_data2.
*endloop.
*
*loop at it_data into data(ls_data).
*  write: / ls_data.
*endloop.
*
*75---------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Have a routine that receives an internal table (with at least three columns) and the sort it by its first column.
*
*types: begin of wa_struct,
*         name   type string,
*         age    type i,
*         weight type p decimals 2,
*       end of wa_struct.
*
*data:
*      it_data2 type table of wa_struct,
*      ls_data  type wa_struct.
*
*start-of-selection.
*
*  perform sort_table tables it_data2 using ls_data.
*
*form sort_table tables it_table using new_struct type wa_struct.
*
*  new_struct-name   = 'Rafael'.
*  new_struct-age    = 37.
*  new_struct-weight = '88.50'.
*  append new_struct to it_table.
*
*  new_struct-name   = 'Bruno'.
*  new_struct-age    = 23.
*  new_struct-weight = '90.50'.
*  append new_struct to it_table.
*
*  new_struct-name   = 'Serafim'.
*  new_struct-age    = 45.
*  new_struct-weight = '70.50'.
*  append new_struct to it_table.
*
*  new_struct-name   = 'Tiago'.
*  new_struct-age    = 30.
*  new_struct-weight = '90.50'.
*  append new_struct to it_table.
*
*  new_struct-name   = 'Daniel'.
*  new_struct-age    = 37.
*  new_struct-weight = '65.50'.
*  append new_struct to it_table.
*
*  sort it_data2 by name ascending.
*
*endform.
*
*76---------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Have a routine that receives an internal table (with at least three columns) and a string with the name of a column.
"Sort the table by the specified column accordingly.
*
*types: begin of wa_struct,
*         name   type string,
*         age    type i,
*         weight type p decimals 2,
*       end of wa_struct.
*
*data: it_data type table of wa_struct with key name,
*      ls_data type wa_struct.
*
*start-of-selection.
*
*  perform fill_table tables it_data using ls_data.
*  perform sort_data tables it_data using 'name'.
*
*  cl_demo_output=>display( it_data ).
*
*form fill_table tables it_table using new_struct type wa_struct.
*
*  do 50 times.
*
*    new_struct-name = 'Rafael'.
*    new_struct-age = 37.
*    new_struct-weight = '88.50'.
*    append new_struct to it_table.
*
*    new_struct-name = 'ZRafael'.
*    new_struct-age = 37.
*    new_struct-weight = '88.50'.
*    append new_struct to it_table.
*
*  enddo.
*
*endform.
*form sort_data tables it_table using namecol type string.
*
*  sort it_table by (namecol) ascending.
*
*endform.
*
*77---------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Have a routine that receives an internal table (with at least three fields) and another internal table with the name of the columns to be ordered and order accordingly
*
*types: begin of wa_struct,
*         id   type n length 8,
*         name type c length 20,
*         age  type i,
*       end of wa_struct,
*       tt_people type table of wa_struct with key id.
*
*data: wa_person type wa_struct,
*      it_people type table of wa_struct with key id.
*
*start-of-selection.
*
*  perform fill_data.
*
*  data it_sort_columns type table_of_strings.
*
*  write 'Before SORT'. new-line.
*  perform print_people using it_people.
*
*  append `NAME` to it_sort_columns.
*
*  perform sort_any_columns using it_sort_columns changing it_people.
*
*  refresh it_sort_columns.
*
*  write 'After SORT NAME'. new-line.
*  perform print_people using it_people.
*
*  append `AGE` to it_sort_columns.
*  append `ID` to it_sort_columns.
*
*  perform sort_any_columns using it_sort_columns changing it_people.
*
*  refresh it_sort_columns.
*
*  write 'After SORT AGE/ID'. new-line.
*  perform print_people using it_people.
*
*  append `AGE` to it_sort_columns.
*  append `NAME` to it_sort_columns.
*  append `ID` to it_sort_columns.
*
*  perform sort_any_columns using it_sort_columns changing it_people.
*
*  refresh it_sort_columns.
*
*  write 'After SORT AGE/NAME/ID'. new-line.
*  perform print_people using it_people.
*
*form fill_data.
*
*  wa_person-id = 3.
*  wa_person-name = 'Pessoa1'.
*  wa_person-age = 30.
*  append wa_person to it_people.
*
*  wa_person-id = 6.
*  wa_person-name = 'Pessoa2'.
*  wa_person-age = 40.
*  append wa_person to it_people.
*
*  wa_person-id = 2.
*  wa_person-name = 'Pessoa3'.
*  wa_person-age = 30.
*  append wa_person to it_people.
*
*  wa_person-id = 1.
*  wa_person-name = 'Pessoa4'.
*  wa_person-age = 10.
*  append wa_person to it_people.
*
*  wa_person-id = 5.
*  wa_person-name = 'Pessoa5'.
*  wa_person-age = 20.
*  append wa_person to it_people.
*
*  wa_person-id = 4.
*  wa_person-name = 'Pessoa6'.
*  wa_person-age = 40.
*  append wa_person to it_people.
*
*endform.
*
*form sort_any_columns using us_t_columns type table_of_strings changing ch_itab_people type tt_people.
*
*  data lv_number_of_lines type i.
*
*  describe table us_t_columns lines lv_number_of_lines.
*
*  data: lv_first_column  type string,
*        lv_second_column type string,
*        lv_third_column  type string.
*
*  case lv_number_of_lines.
*    when 1.
*      read table us_t_columns index 1 into lv_first_column.
*
*      sort ch_itab_people by (lv_first_column) ascending.
*    when 2.
*      read table us_t_columns index 1 into lv_first_column.
*      read table us_t_columns index 2 into lv_second_column.
*
*      sort ch_itab_people by (lv_first_column) ascending (lv_second_column) ascending..
*    when 3.
*      read table us_t_columns index 1 into lv_first_column.
*      read table us_t_columns index 2 into lv_second_column.
*      read table us_t_columns index 3 into lv_third_column.
*
*      sort ch_itab_people by (lv_first_column) ascending (lv_second_column) ascending (lv_third_column) ascending.
*  endcase.
*
*endform.
*form print_people using us_itab_people type tt_people.
*
*  data lwa_person type wa_struct.
*
*  loop at us_itab_people into lwa_person.
*    write: lwa_person-id, lwa_person-name, lwa_person-age.
*    new-line.
*  endloop.
*
*endform.
*
*78---------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*Contains a select-options for numeric values and print the result of multiplying each number within the range of 3.
*
*
*data: lv_num type i.
*
*data: lv_operation type i,
*      lv_count     type i.
*
*data: lv_difference.
*
*select-options sv_num for lv_num no-extension.
*
*start-of-selection.
*
*  lv_difference = sv_num-high - sv_num-low + 1.
*  lv_count = sv_num-low.
*
*  do lv_difference times.
*    lv_operation = lv_count * 3.
*    write: / lv_operation.
*    add 1 to lv_count.
*  enddo.
*
*
*79---------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*-----------------------------------------------------------------------------------------------------------------------------------------------
*
data
